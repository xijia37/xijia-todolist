create table if not exists Company (
	id int unsigned auto_increment primary key,
	version integer not null,
	companyName varchar(100) not null, 
	companyDesc text, 
	siteUrl varchar(100),
	externalWebsite varchar(100), 	
	companyCode varchar(40) not null, 
	email varchar(30),
	phone varchar(20), 
	address varchar(100), 
	city varchar(30), 
	state varchar(30),
	zip varchar(10),
	contact varchar(30),
	
  createdBy varchar(100),
  modifiedBy varchar(100),
  modifiedOn datetime,
  createdOn datetime
); 

create table if not exists Project (
	id int unsigned auto_increment primary key,
	version integer not null,
	projectName varchar(100) not null, 
	projectDesc text, 
	projectType varchar(50), 
	
	dfltAssigned varchar(100),
	dlftMilestone integer default 0, 
	ticketStatuses text, 
	openStates text, 
	closeStates text,
	generateActivity tinyint(1) default 1,
	tickets integer default 0, 
	openTickets integer default 0,  
	
	projectLocale varchar(10), 

  createdBy varchar(100),
  modifiedBy varchar(100),
  modifiedOn datetime,
  createdOn datetime,
	
	
	companyId int unsigned not null, 
	FOREIGN KEY (companyId) REFERENCES Company(id)
); 

create table if not exists User (
	userId varchar(100) primary key, 
	userName varchar(100) not null, 
	roles varchar(200), 
	version integer not null,
	tagline varchar(100), 
	password varchar(40) not null, 
	avatar varchar(200), 
	jobTitle varchar(100),
	email varchar(100), 
	emailPreference varchar(100), 
	website varchar(100),
	
	lastLogin datetime, 
	lastIp varchar(20), 

  createdBy varchar(100),
  modifiedBy varchar(100),
  modifiedOn datetime,
  createdOn datetime,

	companyId int unsigned not null, 
	FOREIGN KEY (companyId) REFERENCES Company(id)
); 
 
create table if not exists UserFollow (
	follower varchar(100) not null, 
	follows varchar(100) not null, 
	startOn datetime, 
	primary key (follower, follows)
); 

create table if not exists ProjectCommittee (
	projectId int unsigned not null, 
	userId varchar(100)  not null, 
	role varchar(100), 
	joinOn datetime, 
	
	companyId int unsigned not null, 
	primary key (projectId, userId),
	FOREIGN KEY (companyId) REFERENCES Company(id),
	FOREIGN KEY (projectId) REFERENCES Project(id),
	FOREIGN KEY (userId) REFERENCES User(userId)
); 

create table if not exists Ticket (
	id int unsigned auto_increment primary key,
	version integer not null,
	projectId int unsigned not null, 
	title varchar(100) not null, 
	ticketDesc text not null, 
	ticketStatus varchar(20) not null, 
	ticketPriority varchar(20) not null, 
	owner varchar(40),

	milestoneId integer,
	
	ticketType varchar(40),		
	duedate datetime,
	est varchar(20),
	activityCount integer default 0,
	commentCount integer default 0,
	attachmentCount integer default 0,
	viewCount integer default 0,
	watcherCount integer default 0,
	tags text,

  	createdBy varchar(100),
  	modifiedBy varchar(100),
  	modifiedOn datetime,
  	createdOn datetime,

	companyId int unsigned not null, 
	FOREIGN KEY (projectId) REFERENCES Project(id),
	FOREIGN KEY (companyId) REFERENCES Company(id)

);


create table if not exists TicketHistory (
	id int unsigned auto_increment primary key,
	historyDate datetime not null,
	historyType varchar(20), 
	historyDesc text, 
	comments text, 
	userId varchar(30),
	projectId int unsigned not null, 
	ticketId int unsigned not null, 
	FOREIGN KEY (ticketId) REFERENCES Ticket(id),
	FOREIGN KEY (projectId) REFERENCES Project(id),
	FOREIGN KEY (userId) REFERENCES User(userId)
);

create table if not exists Activity (
	id int unsigned auto_increment primary key,
	activityDate datetime not null, 
	activityDesc text not null,
	activityType varchar(20), 
	ticketId integer, 
	projectId integer,
	userId varchar(100) not null, 
	
	companyId int unsigned not null, 
	FOREIGN KEY (companyId) REFERENCES Company(id)	
);

create table if not exists TicketTag (
	ticketId int unsigned, 
	projectId int unsigned,
	tag varchar(40),

	FOREIGN KEY (ticketId) REFERENCES Ticket(id),
	FOREIGN KEY (projectId) REFERENCES Project(id),
	primary key (ticketId, tag)
);

create table if not exists TicketNotification (
	ticketId int unsigned, 
	projectId int unsigned,
	userId varchar(100),
	primary key (ticketId, userId), 
	FOREIGN KEY (userId) REFERENCES User(userId), 
	FOREIGN KEY (ticketId) REFERENCES Ticket(id)		
);


create table if not exists DefinedTag (
	projectId int unsigned,
	tag varchar(40),
	
	createdBy varchar(20),
  	createdOn datetime,
  
  	FOREIGN KEY (projectId) REFERENCES Project(id),
	primary key (projectId, tag)
); 


create table if not exists Attachment (
	id int unsigned auto_increment primary key,
	ticketId integer, 
	ticketHistoryId integer default 0,
	projectId integer,
	messageId integer,

	fileName varchar(100) not null, 
	title varchar(100) not null, 
	contentType varchar(50), 
	contentSize integer,
	
	isImage tinyint(1) default 0 not null, 
	location varchar(200), 

  createdBy varchar(100),
  modifiedBy varchar(100),
  modifiedOn datetime,
  createdOn datetime
); 

create table if not exists Milestone (
	id int unsigned auto_increment primary key,
	projectId int unsigned,

	title varchar(100) not null, 
	milestoneDesc text, 
	
  createdBy varchar(100),
  modifiedBy varchar(100),
  modifiedOn datetime,
  createdOn datetime,
  FOREIGN KEY (projectId) REFERENCES Project(id)				
);

create table if not exists ShortMsg (
	id int unsigned auto_increment primary key,
	title varchar(100),
	msg text, 
	msgType integer default 0, 
	msgId int unsigned,
	projectId int unsigned,
	companyId int unsigned,

	commentCount integer default 0, 
	attachmentCount integer default 0,

  	createdBy varchar(100),
  	createdOn datetime,				

	FOREIGN KEY (projectId) REFERENCES Project(id),
	FOREIGN KEY (companyId) REFERENCES Company(id)
); 
	
create table if not exists MsgRecipient (
	msgId int unsigned,
	userId varchar(100),
	primary key (msgId, userId),
	FOREIGN KEY (userId) REFERENCES User(userId),
	FOREIGN KEY (msgId) REFERENCES ShortMsg(id)		
); 

create table if not exists Page (
	id int unsigned auto_increment primary key,
	title varchar(100),
	pageContent text, 
	displayOrder integer default 0,
	
	pageType integer default 0, 
	
  	createdBy varchar(100),
  	modifiedBy varchar(100),
  	modifiedOn datetime,
  	createdOn datetime,
  	
	companyId int unsigned not null, 
	FOREIGN KEY (companyId) REFERENCES Company(id)

);